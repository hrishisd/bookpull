# Run this job on pushes to `main`, and for pull requests. If you don't specify
# `branches: [main], then this actions runs _twice_ on pull requests, which is
# annoying.

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # If you wanted to use multiple Python versions, you'd have specify a matrix in the job and
      # reference the matrixe python version here.
      - uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      # The key configuration value here is `virtualenvs-in-project: true`: this creates the
      # venv as a `.venv` in your testing directory, which allows the next step to easily
      # cache it.
      - name: Install and configure poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
      # from installing Poetry every time, which can be slow. Note the use of the Poetry version
      # number in the cache key, and the "-0" suffix: this allows you to invalidate the cache
      # manually if/when you want to upgrade Poetry, or if something goes wrong. This could be
      # mildly cleaner by using an environment variable, but I don't really care.
      - name: Set up cache
        uses: actions/cache@v3
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}


      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Run tests
        run: poetry run pytest
